# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  IGG:
    url: "https://feed.iggv5.com/c/3216bc44-dbb9-4bed-bc8e-9cdf6f14474f/platform/clash/iGG-iGuge"
    type: http
    # 更新间隔时间（秒）86400为24小时
    interval: 86400
    health-check:
      enable: true
      # 自动测延迟地址
      url: https://www.gstatic.com/generate_204
      # 自动测延迟间隔时间（秒）300为5分钟
      interval: 300
    proxy: 直连
    # 拉取订阅请求头
    # header:
      # UA一般使用"Clash.meta"
      # User-Agent:
      # - "Clash"
      # - "mihomo"
      # - "Clash.meta"
    # 额外参数
    # override:
      # 定义机场手动，打开udp支持。
      # udp: true
      # 订阅下载上传速度
      # down: "50 Mbps"
      # up: "10 Mbps"
      # 跳过证书验证
      # skip-cert-verify: true
  CC:
    url: "https://wasai.carryz.net/api/v1/client/subscribe?token=53023e5082e5150b75912986356ecc12"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 所有自动
# 全局UA
# global-ua: clash.meta

# 节点信息
proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
# 允许局域网
allow-lan: true
# 绑定IP地址，"*"为绑定所有
bind-address: "*"
# IPv6总开关
ipv6: false
# 统一延迟
unified-delay: true
# TCP并发
tcp-concurrent: true
# 日志级别
log-level: warning
# 进程匹配
find-process-mode: 'off'
# 绑定网卡
# interface-name: en0
# 全局指纹，伪装浏览器指纹
global-client-fingerprint: chrome
# 移动设备省电相关
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  # 手动缓存
  store-selected: true
  # fake-ip缓存
  store-fake-ip: true

# 控制面板
# 面板IP和端口
external-controller: 0.0.0.0:9090
# 登录面板密码
secret: ""
# UI文件下载路径
external-ui: "/etc/mihomo/run/ui"
# UI名称
external-ui-name: zashboard
# 面板下载地址
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
# sniffer:
  # 是否开启嗅探
  # enable: true
  # 嗅探类型，协议和端口
  # sniff:
    # HTTP:
      # ports: [80, 8080-8880]
      # override-destination: true
    # TLS:
      # ports: [443, 8443]
    # QUIC:
      # ports: [443, 8443]
  # 强制嗅探
  # force-domain:
    # - "+.v2ex.com"
  # 跳过忽略嗅探
  # skip-domain:
    # - "+.baidu.com"

# 入站  裸核必须设置，OpenClash、NiKKi插件自动设置
tun:
  # 开启TUN模式
  enable: true
  # TUN模式协议栈
  # system/gvisor/mixed
  stack: gvisor
  # DNS劫持端口
  dns-hijack: ["any:53", "tcp://any:53"]
  # 自动路由
  auto-route: true
  # 自动重定向
  auto-redirect: true
  # 自动接口选择
  auto-detect-interface: true

# DNS模块
dns:
  # 是否开启DNS
  enable: true
  # 监听端口，nikki为1053，openclash为7874，插件自动设置端口，裸核指定
  listen: 0.0.0.0:1053
  # 是否解析IPv6地址
  ipv6: false
  # 是否遵循路由规则
  respect-rules: true
  # 模式fake-ip或redir-host，建议fake-ip模式
  enhanced-mode: fake-ip
  # fake-ip地址池
  fake-ip-range: 28.0.0.1/8
  # fake-ip过滤列表模式，blacklist黑名单模式
  fake-ip-filter-mode: blacklist
  # fake-ip过滤列表
  fake-ip-filter:
    - "rule-set:Private_Domain,China_Domain,Direct_Domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
    - ".aliyuncs.com"
    - "+.221636.xyz"
    - "+.wanghglc.top"
    - "+.4770113.xyz"
    - "+.moeyy.xyz"
    - "+.njxyj.cn"
    - "+.erp321.com"

    - +.lan
    - +.local
    # - geosite:cn
# 快猫    
    - +.quickcht3.club
    - +.kuaimao2.club
# 火烧 
    - +.onesubv.site
    - +.oneyyds.online
    - +.fengyyds.site
    - +.onemg.top
# 猫耳 
    - +.zhunchuanpb.com
    - +.sevenka.top
# BestVPN 
    - +.networklinkpro.net
    - +.prosubnet02.eu
# 小牛
    - +.4yfu73r3a4kl.com
    - +.xiaoniuyun.cc  
# 硅谷
    - +.huawei-cloud.shop
    - +.huawei-cloud.vip
    - +.gpt-agent.cc      
# 无界
    - +.acwct.cn
    - +.472361.xyz
# 冰云
    - +.bingyun.ink   
    - +.fafhjkah.xyz
# 牛逼   
    - +.66jc.top  
    - +.jueduibupao.top  
    
    - +.qeayr.cn
    - +.saojc.xyz   
    - +.sssyun.xyz
    - +.dler.cloud
    - +.0tk8a3a1q4t94dler.com    
    - +.aerianas.top

  # 默认DNS服务器，帮助下面域名的DNS服务器做域名解析，不能使用域名的DNS服务器
  default-nameserver:
    - 223.5.5.5
  # 代理服务器的DNS解析，设置国内的DNS服务器。只是解析手动里的服务器域名
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS，必须的
  nameserver:
    - 223.5.5.5
    - 119.29.29.29

# ========================
# 策略组定义
# ========================
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
default: &default {type: select, proxies: [直连,手动选择,所有自动,香港自动,台湾自动,日本自动,新加坡自动,韩国自动,美国自动,其他自动,奈飞自动,奈飞手动,拒绝]}

proxy-groups:
  - {name: ChatGPT, <<: *default}
  - {name: Claude, <<: *default}
  - {name: Meta AI, <<: *default}
  - {name: Perplexity, <<: *default}
  - {name: GitHub, <<: *default}
  - {name: Telegram, <<: *default}
  - {name: Twitter(X), <<: *default}
  - {name: WhatsApp, <<: *default}
  - {name: Facebook, <<: *default}
  - {name: Steam, <<: *default}
  - {name: Game, <<: *default}
  - {name: YouTube, <<: *default}
  - {name: TikTok, <<: *default}
  - {name: Disney, <<: *default}
  - {name: Netflix, <<: *default}
  - {name: HBO, <<: *default}
  - {name: Spotify, <<: *default}
  - {name: Crypto, <<: *default}
  - {name: Amazon, <<: *default}
  - {name: Apple, <<: *default}
  - {name: Microsoft, <<: *default}
  - {name: Google, <<: *default}
  - {name: Test, <<: *default}
  - {name: 国外, <<: *default}
  - {name: 国内, <<: *default}
  - {name: 漏网之鱼, <<: *default}
  - {name: 手动选择, type: select, include-all: true, filter: "^((?!(直连|拒绝)).)*$"}
  - {name: 所有自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^((?!(直连|拒绝)).)*$"}
  - {name: 香港自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"}
  - {name: 台湾自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan)).*$"}
  - {name: 日本自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"}
  - {name: 新加坡自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: 韩国自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: 美国自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "(?i)(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|硅谷|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"}
  - {name: 其他自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|硅谷|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK)).)*$"}
  - {name: 奈飞自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)(?=.*(NF|奈飞|解锁|Netflix|NETFLIX|Media))"}
  - {name: 奈飞手动, type: select, include-all: true, filter: "(?i)(?=.*(NF|奈飞|解锁|Netflix|NETFLIX|Media))"}

# ========================
# 规则引擎（rules）
# ========================
# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,TEST_Domain,Test
  - RULE-SET,ChatGPT_Domain,ChatGPT
  - RULE-SET,Claude_Domain,Claude
  - RULE-SET,Meta AI_Domain,Meta AI
  - RULE-SET,Perplexity_Domain,Perplexity
  - RULE-SET,Github_Domain,GitHub
  - RULE-SET,Telegram_Domain,Telegram
  - RULE-SET,Telegram_IP,Telegram,no-resolve
  - RULE-SET,Twitter_Domain,Twitter(X)
  - RULE-SET,WhatsApp_Domain,WhatsApp
  - RULE-SET,Facebook_Domain,Facebook
  - RULE-SET,Amazon_Domain,Amazon
  - RULE-SET,Apple_Domain,Apple
  - RULE-SET,Apple-CN_Domain,Apple  
  - RULE-SET,Microsoft_Domain,Microsoft
  - RULE-SET,OKX_Domain,Crypto
  - RULE-SET,Bybit_Domain,Crypto
  - RULE-SET,Binance_Domain,Crypto
  - RULE-SET,Youtube_Domain,YouTube
  - RULE-SET,TikTok_Domain,TikTok
  - RULE-SET,Netflix_Domain,Netflix
  - RULE-SET,Netflix_IP,Netflix,no-resolve
  - RULE-SET,Disney_Domain,Disney
  - RULE-SET,HBO_Domain,HBO
  - RULE-SET,Spotify_Domain,Spotify
  - RULE-SET,Steam_Domain,Steam
  - RULE-SET,Epic_Domain,Game
  - RULE-SET,EA_Domain,Game
  - RULE-SET,Blizzard_Domain,Game
  - RULE-SET,UBI_Domain,Game
  - RULE-SET,Sony_Domain,Game
  - RULE-SET,Nintend_Domain,Game
  - RULE-SET,Google_Domain,Google
  - RULE-SET,Google_IP,Google,no-resolve
  - RULE-SET,Proxy_Domain,国外
  - RULE-SET,Globe_Domain,国外  
  # - RULE-SET,GateFireWall_Domain,国外 
  - RULE-SET,Direct_Domain,国内
  - RULE-SET,China_Domain,国内
  - RULE-SET,China_IP,国内,no-resolve
  - RULE-SET,Private_Domain,国内
  - MATCH,漏网之鱼

# ========================
# 规则集提供者
# ========================
# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  ChatGPT_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/openai.mrs"}
  Claude_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Claude/Claude.list"}
  Meta AI_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/MetaAi.list"}
  Perplexity_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/perplexity.mrs"}
  AI_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs"}
  Github_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  Telegram_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  Telegram_IP: {<<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  Twitter_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/x.mrs"}
  WhatsApp_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Whatsapp/Whatsapp.list"}
  Facebook_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/facebook.mrs"}
  Amazon_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/amazon.mrs"}
  Apple-CN_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  Apple_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs"}  
  Microsoft_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  OKX_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/okx.mrs"}
  Bybit_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bybit.mrs"}
  Binance_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/binance.mrs"}
  Youtube_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  TikTok_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  Netflix_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  Netflix_IP: {<<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  Disney_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs"}
  HBO_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/hbo.mrs"}
  Spotify_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"}
  Steam_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  Epic_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.list"}
  EA_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/EA/EA.list"}
  Blizzard_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list"}
  UBI_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/UBI/UBI.list"}
  Sony_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Sony/Sony.list"}
  Nintend_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo.list"}
  Google_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  Google_IP: {<<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  TEST_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Check.list"}
  Proxy_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/whg112/mihomo/refs/heads/main/Proxy.list"}
  Globe_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global.list"} 
  Direct_Domain: {<<: *class, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/whg112/mihomo/refs/heads/main/Direct.list"}
  China_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  China_IP: {<<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  Private_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
#  GateFireWall_Domain: {<<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}


